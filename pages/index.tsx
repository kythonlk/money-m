import Head from 'next/head';
import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react';
import TodoList from '@/components/TodoList';
import IncomeList from '@/components/Incomes';
import DailyExpenses from '@/components/DailyExpensesList';
import Login from '@/components/Login';
import OverView from '@/components/Overview';
import Invesment from '@/components/Invesments';
import React, { useEffect, useState } from 'react';

export default function Home() {
  const session = useSession();
  const supabase = useSupabaseClient();
  const [balance, setBalance] = useState<number>(0);
  const [expensesTotal, setExpensesTotal] = useState<number>(0);
  const [incomesTotal, setIncomesTotal] = useState<number>(0);
  const [selectedTab, setSelectedTab] = useState<'income' | 'expenses' | 'expenses-daily' | 'overview' | 'invesments'>('overview');
  const [isSidebarOpen, setSidebarOpen] = useState(false);

  const updateBalance = async () => {
    if (!session) return;

    const { data: expenses } = await supabase
      .from('todos')
      .select('amount')
      .filter('user_id', 'eq', session.user.id);

    const { data: incomes } = await supabase
      .from('income')
      .select('amount')
      .filter('user_id', 'eq', session.user.id);

    const expensesTotal = expenses ? expenses.reduce((acc, expense) => acc + expense.amount, 0) : 0;
    const incomesTotal = incomes ? incomes.reduce((acc, income) => acc + income.amount, 0) : 0;

    setExpensesTotal(expensesTotal);
    setIncomesTotal(incomesTotal);

    const balanceResult = incomesTotal - expensesTotal;

    setBalance(balanceResult);
  };

  useEffect(() => {
    updateBalance();
  }, [session]);

  return (
    <>
      <Head>
        <title>Money Manager</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`${isSidebarOpen ? 'grid grid-cols-2' : 'flex'
        } md:flex md:flex-row h-screen bg-gray-200`}
      >
        {session && (
          <>
            {/* Hamburger button for mobile screens */}
            <button
              className="md:hidden fixed top-0 left-0 pt-8 pl-8 text-2xl text-black"
              onClick={() => setSidebarOpen(!isSidebarOpen)}
            >
              ☰
            </button>

            {/* Sidebar for larger screens */}
            <div
              className={`${isSidebarOpen ? 'z-50 w-80' : 'hidden'
                } md:flex md:flex-col md:w-1/6 p-4 bg-gray-900 text-white`}
            >
              <button
                className="md:hidden p-2 ml-56 text-white"
                onClick={() => setSidebarOpen(false)}
              >
                Close
              </button>
              <div>
                <h1 className="text-2xl font-bold mb-4">Money Manager</h1>
                <ul>
                  <li className="mb-2">
                    <a
                      href="#"
                      className={`rounded-lg p-1 px-2 text-lg hover:bg-gray-700 ${selectedTab === 'overview' && 'bg-gray-700'
                        }`}
                      onClick={() => setSelectedTab('overview')}
                    >
                      Over View (dev mode)
                    </a>
                  </li>
                  <li className="mb-2">
                    <a
                      href="#"
                      className={`rounded-lg p-1 px-2 text-lg hover:bg-gray-700 ${selectedTab === 'income' && 'bg-gray-700'
                        }`}
                      onClick={() => setSelectedTab('income')}
                    >
                      Income List 
                    </a>
                  </li>
                  <li className="mb-2">
                    <a
                      href="#"
                      className={`rounded-lg p-1 px-2 text-lg hover:bg-gray-700 ${selectedTab === 'expenses' && 'bg-gray-700'
                        }`}
                      onClick={() => setSelectedTab('expenses')}
                    >
                      Expenses
                    </a>
                  </li>
                  <li className="mb-2">
                    <a
                      href="#"
                      className={`rounded-lg p-1 px-2 text-lg hover:bg-gray-700 ${selectedTab === 'expenses-daily' && 'bg-gray-700'
                        }`}
                      onClick={() => setSelectedTab('expenses-daily')}
                    >
                      Daily Expenses (dev mode)
                    </a>
                  </li>
                  <li className="mb-2">
                    <a
                      href="#"
                      className={`rounded-lg p-1 px-2 text-lg hover:bg-gray-700 ${selectedTab === 'invesments' && 'bg-gray-700'
                        }`}
                      onClick={() => setSelectedTab('invesments')}
                    >
                      Invesments (dev mode)
                    </a>
                  </li>

                </ul>
              </div>
              <div className="flex-grow"></div>
              <div className="flex flex-col">
                <div className="flex mb-4">
                  <p className="">Total Balance :&nbsp;&nbsp;</p>
                  <p>LKR {balance}</p>
                </div>
                <button
                  className="btn-black"
                  onClick={async () => {
                    const { error } = await supabase.auth.signOut();
                    if (error) console.log('Error logging out:', error.message);
                  }}
                >
                  Logout
                </button>
              </div>
            </div>
          </>
        )}




        {session && (
          <div className="p-4 md:p-12 md:w-5/6">
            <div className="flex flex-col border-b-2 border-black">
              <button
                className="md:hidden fixed top-0 left-0 pl-8 pt-8 text-2xl text-black"
                onClick={() => setSidebarOpen(!isSidebarOpen)}
              >
                ☰
              </button>
              <h1 className="text-2xl pt-4 md:pl-4 pl-52 font-bold mb-4">Money Manager</h1>
            </div>
            <>
              {selectedTab === 'overview' && (
                  <OverView balance={balance} expenses={expensesTotal} income={incomesTotal} />
                )}
              {selectedTab === 'income' && <IncomeList session={session} />}
              {selectedTab === 'expenses' && <TodoList session={session} />}
              {selectedTab === 'expenses-daily' && <DailyExpenses session={session} />}
              {selectedTab === 'invesments' && <Invesment  session={session} />}
            </>
          </div>
        )}
        {!session && <Login />}

      </div>
    </>
  );
}
